package com.example.demo.service;
import java.util.List;
import java.util.Optional;

import org.apache.kafka.common.errors.ResourceNotFoundException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.example.demo.exception.ModelAddException;
import com.example.demo.exception.ModelEmptyListException;
import com.example.demo.exception.ModelNotFoundException;
import com.example.demo.model.Money;
import com.example.demo.repository.IMoney;

@Service
@Transactional
public class IMoneyServiceImpl implements IMoneyService{
	
	@Autowired
	private IMoney iMoneyRepository;

	@Override
	public Money addMoney(Money money) {
		// TODO Auto-generated method stub
		try {
			return iMoneyRepository.save(money);
		} catch (Exception e) {
			throw new ModelAddException("Can't add Money , please provide the proper details");
		}
	}

	@Override
	public void removeMoney(Integer moneyId) {
		// TODO Auto-generated method stub
		Optional<Money> moneyList = this.iMoneyRepository.findById(moneyId);

		if (moneyList.isPresent()) {
			this.iMoneyRepository.delete(moneyList.get());
		} else {
			throw new ModelNotFoundException("The card you are trying to delete is not available");
		}
		
	}

	@SuppressWarnings("deprecation")
	@Override
	public List<Money> getAllMoney(Integer moneyId) {
		try {
			return (List<Money>) iMoneyRepository.getById(moneyId);
		} catch (Exception e) {
			throw new ModelEmptyListException("Error retriving address...please try again");
		}
	}

	@Override
	public Money updateMoney(Money money, long moneyId) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Money getmoney(Integer id) {
		Optional<Money> addressList = this.iMoneyRepository.getById(id);
		try {
			if (addressList.isPresent()) {
				return addressList.get();
			} else {
				throw new ResourceNotFoundException("Money not found with ID :" + id);
			}
		} catch (Exception e) {
			throw new ModelNotFoundException("Couldn't find the Money by id" + id);
		}
	}
	}
		

}
